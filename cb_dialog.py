from aiogram import types
import g4f.image
from loader import dp, bot
from utils.db_api import quick_commands as commands
from keyboards.inline import inline_menu_start, inline_menu_cancel_dialog
from states import Dialog
from aiogram.dispatcher import FSMContext
import asyncio
import json
from openai import AsyncOpenAI
import g4f
from data import config
from aiogram.types import ParseMode

client = AsyncOpenAI(api_key=config.GPT_API_KEY, http_client=)

async def update_message_with_animation(sent_message: types.Message):

    clocks = ['‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è', '‚ö´Ô∏è‚ö™Ô∏è‚ö™Ô∏è', '‚ö´Ô∏è‚ö´Ô∏è‚ö™Ô∏è', '‚ö´Ô∏è‚ö´Ô∏è‚ö´Ô∏è', '‚ö™Ô∏è‚ö´Ô∏è‚ö´Ô∏è', '‚ö™Ô∏è‚ö™Ô∏è‚ö´Ô∏è']

    i = 0

    while True:

        await sent_message.edit_text(f"""‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—é –∫–∞—Ä—Ç—É, –ø—Ä–æ–≤–µ—Ä—è—é —Ç—Ä–∞–Ω–∑–∏—Ç—ã, —Å–æ–≤–µ—Ç—É—é—Å—å —Å –∫–æ—Å–º–æ—Å–æ–º{clocks[i % len(clocks)]}\n –®—É—á—É, –ø—Ä–æ—Å—Ç–æ –Ω–µ–º–Ω–æ–≥–æ –¥—É–º–∞—é. –°–∫–æ—Ä–æ –¥–∞–º –æ—Ç–≤–µ—Ç! üöÄ""")

        if i < len(clocks) - 1:
            i +=1
        else:
            i = 0    

        await asyncio.sleep(0.4)

async def load_context(card_id) -> list:
    card = await commands.select_card(card_id)
    data_json = card.card_context
    data = json.loads(data_json)
    return data

async def update_context(card_id, context: list, message:dict):
    context.append(message)

    context = trim_history(context)

    context_str = json.dumps(context)
    await commands.update_card_context(card_id=card_id, context=context_str)
    return context


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
def trim_history(history, max_length=32000):
    current_length = sum(len(message["content"]) for message in history)
    
    while history and current_length > max_length:
        removed_message = history.pop(0)
        current_length -= len(removed_message["content"])
    
    print(history)

    return history

async def API_call(messages: dict, card_path):    
    try:
        global client
        completion = await client.chat.completions.create(
            model="gpt-4o",
            messages=messages
        )
        answer = str(completion.choices[0].message.content)
        return answer
    except Exception as ex:
        print(ex)
        return '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ' + str(ex)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ delete_(card_id)
@dp.callback_query_handler(lambda c: 'dialog_' in str(c.data))
async def process_callback(callback_query: types.CallbackQuery, state:FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback-–∑–∞–ø—Ä–æ—Å–∞
    callback_data = callback_query.data

    card_id = int(callback_query.data.replace('dialog_', ''))

    card = await commands.select_card(card_id)

    context = await load_context(card_id)

    await bot.send_message(chat_id=callback_query.message.chat.id, text=f'üí¨ –ù–∞—á–∞—Ç –¥–∏–∞–ª–æ–≥ –ø–æ –∫–∞—Ä—Ç–µ —Å –∏–º–µ–Ω–µ–º: {card.card_text}\n\n')

    await bot.send_message(chat_id=callback_query.message.chat.id, text="üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å", reply_markup=inline_menu_cancel_dialog)

    await Dialog.request.set()

    await state.update_data(card_id = card_id)

    await state.update_data(context = context)

    await state.update_data(card_path = card.card_path)

    await callback_query.answer('Finish')


@dp.message_handler(state=Dialog.request)
async def dialog_get_req(message: types.Message, state: FSMContext):

    user = await commands.select_user(message.from_user.id)

    if user.requests_count == 4:
        await bot.send_message(chat_id=message.chat.id, text="üö® –û—Å—Ç–∞–ª–æ—Å—å 3 –∑–∞–ø—Ä–æ—Å–∞! –ê —ç—Ç–æ –∫–∞–∫ —Ç—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–ª—å–∫–∏ –º–∞–Ω–¥–∞—Ä–∏–Ω–∞ ‚Äì –≤—Ä–æ–¥–µ –µ—Å—Ç—å, –Ω–æ –±—ã—Å—Ç—Ä–æ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è. –ü–æ–¥—É–º–∞–π –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏! üçä", reply_markup=inline_menu_cancel_dialog)

    sent_message = await bot.send_message(chat_id=message.chat.id, text="–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞")

    if user.requests_count > 0:

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ–∂–∏–¥–∞–Ω–∏—è
        animation_task = asyncio.create_task(update_message_with_animation(sent_message))

        data = await state.get_data()

        card_id = data.get('card_id')
        context = data.get('context')
        card_path = data.get('card_path')

        message_to_API = {'role': 'user', 'content' : message.text}

        await update_context(card_id=card_id, context=context, message=message_to_API)

        context_to_API = await load_context(card_id=card_id)

        response = await API_call(messages=context_to_API, card_path=card_path)

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        animation_task.cancel()
        
        if '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ' not in str(response):

            await commands.add_requests_for_user(user_id=user.user_id, requests_count=-1)

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            await sent_message.edit_text(f"{response}", parse_mode=ParseMode.MARKDOWN)

            await update_context(card_id=card_id, context=context, message={'role': 'assistant', 'content' : response})
        else:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            await sent_message.edit_text(f"üîÑ –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –∑–∞–ø—Ä–æ—Å –Ω–µ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω")

        await bot.send_message(chat_id=message.chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–≤–∞–π—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å", reply_markup=inline_menu_cancel_dialog)

        await Dialog.request.set()
    else:
        await bot.send_message(chat_id=message.chat.id, text="üí´ –û, –∫–∞–∂–µ—Ç—Å—è, –∑–≤—ë–∑–¥—ã —à—ë–ø–æ—Ç–æ–º –Ω–∞–º–µ–∫–∞—é—Ç, —á—Ç–æ –ø–æ—Ä–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å. –û–Ω–∏ –µ—â—ë –º–Ω–æ–≥–æ–µ –º–æ–≥—É—Ç —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å ‚Äì –ø—Ä–æ—Å—Ç–æ –∂–º–∏ –∫–Ω–æ–ø–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º! üòä", reply_markup=inline_menu_cancel_dialog)

@dp.callback_query_handler(lambda c: c.data == "cancel_dialog", state=Dialog.request)
async def dialog_get_req(callback_query: types.CallbackQuery, state: FSMContext):
    
    await bot.send_message(chat_id=callback_query.message.chat.id, text="–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω", reply_markup=inline_menu_start)

    await callback_query.answer('Finish')
    await state.finish()